from scipy.signal import cont2discrete, dlti, dlsim
from electric_circuits.test_clustering import test_two_circuits_clustering, test_increasing_noise_intensity
from fMRI.init_data import load_data, preprocess_data
from distance_measures import extended_cepstral_distance_mimo, compute_distance_matrix
from plot_cepstral import plot_cepstral_distance
from electric_circuits.electric_circuits import generate_white_noise_signal
from mimo_systems.power_cepstrum import compute_cepstral_distance, create_discrete_mimo_system
import numpy as np
# test_two_circuits_clustering()
# test_increasing_noise_intensity()
# plot_cepstral_distance()


# subject_ids, outputs, inputs, heart, resp = load_data()
# outputs_rf = preprocess_data(outputs['100206'], heart['100206'], resp['100206'])

# u_1 = inputs['100206']
# u_2 = inputs['102311']
# y_1 = outputs['100206']
# y_2 = outputs['102311']

# print(extended_cepstral_distance_mimo(u_1, y_1, u_2, y_2))
# print(compute_distance_matrix(subject_ids, inputs, outputs, extended_cepstral_distance_mimo))

# print(compute_cepstral_distance(u_1, y_1, u_2, y_2))

A1 = np.array([
    [-1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
    [ 0.0, -2.0,  0.0,  0.0,  0.0,  0.0],
    [ 0.0,  0.0, -0.5,  0.0,  0.0,  0.0],
    [ 0.0,  0.0,  0.0, -3.0,  0.0,  0.0],
    [ 0.0,  0.0,  0.0,  0.0, -1.5,  0.0],
    [ 0.0,  0.0,  0.0,  0.0,  0.0, -2.5]
])

B1 = np.array([
    [ 1.0,  0.0],
    [ 0.0,  1.0],
    [ 0.5,  0.2],
    [-0.3,  1.2],
    [ 0.8, -0.1],
    [ 0.1,  0.6]
])

C1 = np.array([
    [ 1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
    [ 0.0,  1.0,  0.0,  0.0,  0.0,  0.0],
    [ 0.0,  0.0,  1.0,  0.0,  0.0,  0.0],
    [ 0.0,  0.0,  0.0,  1.0,  0.0,  0.0],
    [ 0.0,  0.0,  0.0,  0.0,  1.0,  0.0],
    [ 0.0,  0.0,  0.0,  0.0,  0.0,  1.0]
])

D1 = np.array([
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0]
])


A2 = np.array([
    [-0.8,  0.1,  0.0,  0.0,  0.0,  0.0],
    [-0.2, -1.5,  0.3,  0.0,  0.0,  0.0],
    [ 0.0, -0.4, -2.0,  0.2,  0.0,  0.0],
    [ 0.0,  0.0, -0.1, -1.2,  0.4,  0.0],
    [ 0.0,  0.0,  0.0, -0.3, -1.8,  0.1],
    [ 0.0,  0.0,  0.0,  0.0, -0.2, -2.5]
])

B2 = np.array([
    [ 0.7, -0.1],
    [-0.2,  0.9],
    [ 1.0,  0.3],
    [ 0.4, -0.8],
    [-0.1,  0.5],
    [ 0.6,  0.2]
])

C2 = np.array([
    [ 1.0,  0.5,  0.0,  0.0,  0.0,  0.0],
    [ 0.0,  1.0,  0.2,  0.0,  0.0,  0.0],
    [ 0.0,  0.0,  1.0,  0.3,  0.0,  0.0],
    [ 0.0,  0.0,  0.0,  1.0,  0.4,  0.0],
    [ 0.0,  0.0,  0.0,  0.0,  1.0,  0.6],
    [ 0.0,  0.0,  0.0,  0.0,  0.0,  1.0]
])

D2 = np.array([
    [ 0.1,  0.0],
    [ 0.0,  0.2],
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0],
    [ 0.0,  0.0]
])

sys_1 = create_discrete_mimo_system(A1, B1, C1, D1)
sys_2 = create_discrete_mimo_system(A2, B2, C2, D2)

u_1 = np.random.normal(0, 1, size=(2**14, 2))
u_2 = np.random.normal(0, 1, size=(2**14, 2))

_, y_11, _ = dlsim(sys_1, u_1)
_, y_21, _ = dlsim(sys_2, u_1)
_, y_12, _ = dlsim(sys_1, u_2)
_, y_22, _ = dlsim(sys_2, u_2)

print(f'Distance between time series generated by different systems: {compute_cepstral_distance(u_1.T, y_11.T, u_1.T, y_21.T)}')
print(f'Distance between time series generated by the same systems: {compute_cepstral_distance(u_1.T, y_11.T, u_2.T, y_12.T)}')
